name: Deploy to ECS
description: Applies a given task definition to a running service

inputs:
  task-definition:
    description: "Task Definition file"
    required: true
  service:
    description: "Service to deploy"
    required: true
  environment:
    description: "Environment to deploy to"
    required: true
  # cluster:
  #   description: "The cluster where the service is located"
  #   required: false
  aws_role:
    description: "AWS role to use"
    required: true
  aws_region:
    description: "AWS region to use"
    required: true
  role-duration-seconds:
    description: "Role duration in seconds (default: 1 hour)"
    required: false
    default: "3600"
  wait-for-service-stability:
    description: "Whether to wait for the ECS service to reach stable state after deploying the new task definition. Valid value is true. Will default to not waiting."
    required: false
    default: "false"
  force-new-deployment:
    description: "Whether to force a new deployment of the service. Valid value is true. Will default to not force a new deployment."
    required: false
    default: "false"


runs:
  using: "composite"
  steps:
    - name: Compute aws_account cluster based on environment
      id: names
      shell: bash
      run: |
        case "${{ inputs.environment }}" in
          development)
            cluster="dev-webservices"
            aws_account="312759045859"
            ;;
          staging)
            cluster="staging-webservices"
            aws_account="103467854083"
            ;;
          sandbox)
            cluster="sandbox-webservices"
            aws_account="377785130582"
            ;;
          production)
            cluster="production-webservices"
            aws_account="950754345196"
            ;;
        esac
        echo "cluster=${cluster}" >> $GITHUB_OUTPUT
        echo "aws_account=${aws_account}" >> "$GITHUB_OUTPUT"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: "arn:aws:iam::${{ steps.names.outputs.aws_account  }}:role/${{ inputs.aws_role }}"
        role-skip-session-tagging	: true
        role-duration-seconds: "${{ inputs.role-duration-seconds }}"

    - name: Describe ECS service
      shell: bash
      run: |
        echo "Describing ECS service: ${{ inputs.service }} in cluster: ${{ steps.names.outputs.cluster }}"
        aws ecs describe-services \
          --cluster "${{ steps.names.outputs.cluster }}" \
          --services "${{ inputs.service }}" \
          --output json | jq '.services[0] | {serviceName, status, runningCount, pendingCount, desiredCount, taskDefinition}'

        # Check if command was successful
        if [ $? -eq 0 ]; then
          echo "✅ Successfully described ECS service. Credentials and permissions are working."
        else
          echo "❌ Failed to describe ECS service. Please check credentials and permissions."
          # This doesn't fail the workflow, but provides clear error information
        fi

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ inputs.task-definition }}
        service: ${{ inputs.service }}
        cluster: "${{ steps.names.outputs.cluster }}"
        wait-for-service-stability: ${{ inputs.wait-for-service-stability }}
        force-new-deployment: ${{ inputs.force-new-deployment }}
